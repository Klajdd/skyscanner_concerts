"use strict";
var jwt = require("jsonwebtoken");
var TOKEN_LEEWAY = 30;
var TOKEN_EXPIRY = 24 * 60 * 60;
var Authenticator = (function () {
    function Authenticator(appId, appKeyId, appKeySecret) {
        this.appId = appId;
        this.appKeyId = appKeyId;
        this.appKeySecret = appKeySecret;
    }
    Authenticator.prototype.authenticate = function (request, response, options) {
        var body = request.body; // FIXME
        var grantType = body["grant_type"];
        if (grantType === "client_credentials") {
            this.authenticateWithClientCredentials(response, options);
        }
        else if (grantType === "refresh_token") {
            var oldRefreshToken = body["refresh_token"];
            this.authenticateWithRefreshToken(oldRefreshToken, response, options);
        }
        else {
            writeResponse(response, 401, {
                error: "unsupported_grant_type",
            });
        }
    };
    Authenticator.prototype.authenticateWithClientCredentials = function (response, options) {
        var accessToken = this.generateAccessToken(options);
        var refreshToken = this.generateRefreshToken(options);
        writeResponse(response, 200, {
            access_token: accessToken,
            token_type: "bearer",
            expires_in: TOKEN_EXPIRY,
            refresh_token: refreshToken,
        });
    };
    Authenticator.prototype.authenticateWithRefreshToken = function (oldRefreshToken, response, options) {
        var decoded;
        try {
            decoded = jwt.verify(oldRefreshToken, this.appKeySecret, {
                issuer: "keys/" + this.appKeyId,
                clockTolerance: TOKEN_LEEWAY,
            });
        }
        catch (e) {
            var description = void 0;
            if (e instanceof jwt.TokenExpiredError) {
                description = "refresh token has expired";
            }
            else {
                description = "refresh token is invalid";
            }
            writeResponse(response, 401, {
                error: "invalid_grant",
                error_description: description,
            });
            return;
        }
        if (decoded.refresh !== true) {
            writeResponse(response, 401, {
                error: "invalid_grant",
                error_description: "refresh token does not have a refresh claim",
            });
            return;
        }
        if (options.userId !== decoded.sub) {
            writeResponse(response, 401, {
                error: "invalid_grant",
                error_description: "refresh token has an invalid user id",
            });
            return;
        }
        var newAccessToken = this.generateAccessToken(options);
        var newRefreshToken = this.generateRefreshToken(options);
        writeResponse(response, 200, {
            access_token: newAccessToken,
            token_type: "bearer",
            expires_in: TOKEN_EXPIRY,
            refresh_token: newRefreshToken,
        });
    };
    Authenticator.prototype.generateAccessToken = function (options) {
        var now = Math.floor(Date.now() / 1000);
        var claims = {
            app: this.appId,
            iss: this.appKeyId,
            iat: now - TOKEN_LEEWAY,
            exp: now + TOKEN_EXPIRY - TOKEN_LEEWAY,
            sub: options.userId,
        };
        return jwt.sign(claims, this.appKeySecret);
    };
    Authenticator.prototype.generateRefreshToken = function (options) {
        var now = Math.floor(Date.now() / 1000);
        var claims = {
            app: this.appId,
            iss: this.appKeyId,
            iat: now - TOKEN_LEEWAY,
            refresh: true,
            sub: options.userId,
        };
        return jwt.sign(claims, this.appKeySecret);
    };
    return Authenticator;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Authenticator;
function writeResponse(response, statusCode, body) {
    response.writeHead(statusCode, { "Content-Type": "application/json" });
    response.end(JSON.stringify(body));
}
//# sourceMappingURL=authenticator.js.map