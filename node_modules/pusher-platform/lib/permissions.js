"use strict";
var encoders_1 = require("./encoders");
var decoders_1 = require("./decoders");
var Permissions = (function () {
    function Permissions(app) {
        this.app = app;
        this.anonymous = new UserPermissions('anonymous', this.app, true);
        this.authenticated = new UserPermissions('authenticated', this.app, true);
    }
    Permissions.prototype.user = function (userId) {
        return new UserPermissions(userId, this.app, false);
    };
    Permissions.prototype.feed = function (feedName) {
        return new FeedPermissions(feedName, this.app);
    };
    return Permissions;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Permissions;
var UserPermissions = (function () {
    function UserPermissions(userId, app, predefinedUserType) {
        this.userId = userId;
        this.app = app;
        this.predefinedUserType = predefinedUserType;
    }
    UserPermissions.prototype.get = function () {
        return this.app.configRequest({ path: "/feeds/users/" + this.userId, method: "GET" });
    };
    UserPermissions.prototype.add = function (options) {
        return this.updatePermissions("ADD", options);
    };
    UserPermissions.prototype.remove = function (options) {
        return this.updatePermissions("DELETE", options);
    };
    UserPermissions.prototype.updatePermissions = function (operation, options) {
        return this.app.configRequest({
            path: "/feeds/users/" + this.userId,
            method: "PATCH",
            body: encoders_1.writeJSON({
                feeds: options,
                operation: operation,
                predefinedUserType: this.predefinedUserType,
            }),
            headers: {
                "Content-Type": "application/json"
            }
        }).then(function (res) {
            return decoders_1.readJSON(res);
        });
    };
    return UserPermissions;
}());
exports.UserPermissions = UserPermissions;
var FeedPermissions = (function () {
    function FeedPermissions(feedName, app) {
        this.feedName = feedName;
        this.app = app;
    }
    FeedPermissions.prototype.get = function () {
        return this.app.configRequest({ path: "/feeds/" + this.feedName, method: "GET" });
    };
    FeedPermissions.prototype.add = function (options) {
        return this.updatePermissions("ADD", options);
    };
    FeedPermissions.prototype.remove = function (options) {
        return this.updatePermissions("DELETE", options);
    };
    FeedPermissions.prototype.updatePermissions = function (operation, options) {
        var mutableOptions = options;
        mutableOptions["operation"] = operation;
        return this.app.configRequest({
            path: "/feeds/" + this.feedName,
            method: "PATCH",
            body: encoders_1.writeJSON(mutableOptions),
            headers: {
                "Content-Type": "application/json"
            }
        }).then(function (res) {
            return decoders_1.readJSON(res);
        });
    };
    return FeedPermissions;
}());
exports.FeedPermissions = FeedPermissions;
//# sourceMappingURL=permissions.js.map