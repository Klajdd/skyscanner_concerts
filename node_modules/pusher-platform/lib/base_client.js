"use strict";
var https = require("https");
var common_1 = require("./common");
var decoders_1 = require("./decoders");
var BaseClient = (function () {
    function BaseClient(options) {
        this.host = options.host;
    }
    BaseClient.prototype.request = function (options) {
        var headers = {};
        if (options.headers) {
            for (var key in options.headers) {
                headers[key] = options.headers[key];
            }
        }
        if (options.jwt) {
            headers["Authorization"] = "Bearer " + options.jwt;
        }
        var sendOptions = {
            host: this.host,
            method: options.method,
            path: options.path,
            headers: headers,
        };
        var request = https.request(sendOptions);
        return new Promise(function (resolve, reject) {
            function onRequestError(error) {
                unbind();
                reject(error);
            }
            function onResponse(response) {
                unbind();
                var statusCode = response.statusCode;
                if (statusCode >= 200 && statusCode <= 299) {
                    resolve(response);
                }
                else if (statusCode >= 300 && statusCode <= 399) {
                    reject(new Error("Unsupported Redirect Response: " + statusCode));
                }
                else if (statusCode >= 400 && statusCode <= 599) {
                    decoders_1.readJSON(response).then(function (errorDescription) {
                        reject(new common_1.ErrorResponse(statusCode, response.headers, errorDescription));
                    }).catch(function (error) {
                        // FIXME we should probably return raw body
                        reject(new common_1.ErrorResponse(statusCode, response.headers, undefined));
                    });
                }
                else {
                    reject(new Error("Unsupported Response Code: " + statusCode));
                }
            }
            function unbind() {
                request.removeListener("response", onResponse);
                request.removeListener("error", onResponse);
            }
            request.addListener("response", onResponse);
            request.addListener("error", onRequestError);
            if (options.body) {
                options.body.pipe(request);
            }
            else {
                request.end();
            }
        });
    };
    return BaseClient;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BaseClient;
//# sourceMappingURL=base_client.js.map